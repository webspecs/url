<pre class="metadata">
Title: URL Standard
#ifdef WEBSPECS
Group: WebSpecs
#else
Group: WHATWG
#endif
H1: URL
Shortname: url
Status: LS
No Editor: true
Abstract: The URL Standard defines URLs, domains, IP addresses, the <code title>application/x-www-form-urlencoded</code> format, and their APIs.
#ifdef WHATWG
Logo: https://resources.whatwg.org/logo-url.svg
!Version History: <a href="https://github.com/whatwg/url/commits">https://github.com/whatwg/url/commits</a> <a href="https://twitter.com/urlstandard">@urlstandard</a>
!Participate: <a href="https://www.w3.org/Bugs/Public/enter_bug.cgi?product=WHATWG&amp;component=URL">file a bug</a> (<a href="https://www.w3.org/Bugs/Public/buglist.cgi?product=WHATWG&amp;component=URL&amp;resolution=---">open bugs</a>)
!Participate: <a href="https://whatwg.org/mailing-list">whatwg@whatwg.org</a> (<a href="https://whatwg.org/mailing-list#specs">archives</a>)
!Participate: <a href="http://wiki.whatwg.org/wiki/IRC">IRC: #whatwg on Freenode</a>
#endif
Indent: 2
</pre>

<style>
  .grammar-rule a, .grammar-rule span {
    color: black;
    background-color: hsl(120, 100%, 90%);
    font-weight: bold;
    padding: 2px;
    border: 2px solid black;
  }
#ifdef WEBSPECS

.big-issue, .XXX { color: #E50000; background: white; border: solid red; padding: 0.5em; margin: 1em 0; }
.big-issue, .XXX { border-radius: 0.5em }
.big-issue > :first-child, .XXX > :first-child { margin-top: 0; }
p .big-issue, p .XXX { line-height: 3em; }

table { border-collapse: collapse; border-style: hidden hidden none hidden; }
table thead, table tbody { border-bottom: solid; }
table tbody th { text-align: left; }
table tbody th:first-child { border-left: solid; }
table td, table th { border-left: solid; border-right: solid; border-bottom:
solid thin; vertical-align: top; padding: 0.2em; }

.dfnPanel {
  display: inline;
  position: absolute;
  z-index: 35;
  height: auto;
  width: auto;
  padding: 0.5em 0.75em;
  font: small Helvetica Neue, sans-serif, Droid Sans Fallback;
  background: #DDDDDD;
  color: black;
  border: outset 0.2em;
}
.dfnPanel * { margin: 0; padding: 0; font: inherit; text-indent: 0; }
.dfnPanel :link, .dfnPanel :visited { color: black; }
.dfnPanel p:not(.spec-link) { font-weight: bolder; }
.dfnPanel * + p { margin-top: 0.25em; }
.dfnPanel li { list-style-position: inside; }
#endif
</style>


<h2 id=goals class=no-num>Goals</h2>

<p>The URL standard takes the following approach towards making URLs fully interoperable:

<ul>
 <li><p>Align RFC 3986 and RFC 3987 with contemporary implementations and
 obsolete them in the process. (E.g. spaces, other "illegal" code points,
 query encoding, equality, canonicalization, are all concepts not entirely
 shared, or defined.) URL parsing needs to become as solid as HTML parsing.
 [[RFC3986]]
 [[RFC3987]]

 <li><p>Standardize on the term URL. URI and IRI are just confusing. In
 practice a single algorithm is used for both so keeping them distinct is
 not helping anyone. URL also easily wins the
 <a href="http://www.googlefight.com/index.php?word1=url&amp;word2=uri">search result popularity contest</a>.

 <li><p>Supplanting <a href="https://tools.ietf.org/html/rfc6454#section-4">Origin of a URI [sic]</a>.
 [[RFC6454]]

 <li><p>Define URL's existing JavaScript API in full detail and add
 enhancements to make it easier to work with. Add a new <code><a interface>URL</a></code>
 object as well for URL manipulation without usage of HTML elements. (Useful
 for JavaScript worker environments.)
</ul>

<p class=note>As the editors learn more about the subject matter the goals
might increase in scope somewhat.


<h2 id=urls>URLs</h2>

<!-- History behind URL as term:
     http://lists.w3.org/Archives/Public/uri/2012Oct/0080.html -->

<p>A <dfn id=concept-url title='URL'>URL</dfn> is a universal identifier.

<p>A <a>URL</a> consists of components, namely a
<a title='URL scheme'>scheme</a>,
<a title='URL scheme data'>scheme data</a>,
<a title='URL username'>username</a>,
<a title='URL password'>password</a>,
<a title='URL host'>host</a>,
<a title='URL port'>port</a>,
<a title='URL path'>path</a>,
<a title='URL query'>query</a>, and
<a title='URL fragment'>fragment</a>.

<p class="example">
<code>http://username:password@example.com:8000/path?query#fragment</code>
contains values for all <a>URL</a> components except 
<a title="URL scheme data">scheme data</a>.
</p>

<p class="example">
<code>javascript:doSomething()</code> contains values for only 
<a title='URL scheme'>scheme</a> and 
<a title='URL scheme data'>scheme data</a>.
</p>

<p>A <a>URL</a>'s <dfn id=concept-url-scheme title='URL scheme'>scheme</dfn> is
a string that identifies the type of <a>URL</a> and can be used to
dispatch a <a>URL</a> for further processing after
<a title='URL parser'>parsing</a>. It is initially null.

<p>A <a>URL</a>'s
<dfn id=concept-url-scheme-data title='URL scheme data'>scheme data</dfn> is a string holding the contents of a
<a>URL</a>. It is initially null.

<p class="note no-backref">A <a>URL</a>'s
<a title='URL scheme data'>scheme data</a> will be null if its initial
<a title='URL scheme'>scheme</a> is a <a>relative scheme</a>, and
otherwise will be the only component other than <a title='URL
scheme'>scheme</a> that differs from its initial value.

<p>A  <a>URL</a>'s <dfn id=concept-url-username title='URL username'>username</dfn>
is a string identifying a user. It is initially the empty string.

<p>A  <a>URL</a>'s <dfn id=concept-url-password title='URL password'>password</dfn>
is either null or a string identifying a user's credentials. It is initially null.

<p>A  <a>URL</a>'s <dfn id=concept-url-host title='URL host'>host</dfn> is
either null or a <a>host</a>. It is initially null.

<p>A  <a>URL</a>'s <dfn id=concept-url-port title='URL port'>port</dfn> is a
string that identifies a networking port. It is initially the empty string.

<p>A  <a>URL</a>'s <dfn id=concept-url-path title='URL path'>path</dfn> is a
list of zero or more strings holding data, usually identifying a location in hierarchical
form. It is initially the empty list.

<p>A  <a>URL</a>'s <dfn id=concept-url-query title='URL query'>query</dfn> is
either null or a string holding data. It is initially null.

<p>A <a>URL</a>'s <dfn id=concept-url-fragment title='URL fragment'>fragment</dfn>
is either null or a string holding data that can be used for further processing on the
resource the <a>URL</a>'s other components identify.
It is initially null.

<p>A <a>URL</a> also has an associated
<dfn id=concept-url-object title='URL object'>object</dfn> that is either null or a
<code><a>Blob</a></code>. It is initially null.
[[!FILEAPI]]

<p class="note">At this point this is used primarily to support "<code>blob</code>"
URLs, but others can be added going forward, hence "object".


<p>A <dfn>relative scheme</dfn> is a
<a title='URL scheme'>scheme</a> listed in the first column of
the following table. A <dfn>default port</dfn> is a
<a>relative scheme</a>'s optional corresponding
<a title='URL port'>port</a> and is listed in the second column
on the same row.

<table>
 <tr><th><a title='URL scheme'>scheme</a>
     <th><a title='URL port'>port</a>
 <tr><td>"<code>ftp</code>"<td>"<code>21</code>"
 <tr><td>"<code>file</code>"<td>
 <tr><td>"<code>gopher</code>"<td>"<code>70</code>"
 <tr><td>"<code>http</code>"<td>"<code>80</code>"
 <tr><td>"<code>https</code>"<td>"<code>443</code>"
 <tr><td>"<code>ws</code>"<td>"<code>80</code>"
 <tr><td>"<code>wss</code>"<td>"<code>443</code>"
</table>

<!-- The best reason I have for listing "gopher" is Google does it too:
     https://code.google.com/p/google-url/source/browse/trunk/src/url_canon_stdurl.cc#120

     It seems fine to remain compatible on that front, no need to support it
     elsewhere though. -->

<p>A <a>URL</a>
<dfn title="include credentials">includes credentials</dfn> if either its
<a title='URL username'>username</a> is not the empty string or its
<a title='URL password'>password</a> is non-null.
<!-- used by Fetch -->

<p>A <a>URL</a> can be designated as
<dfn id=concept-base-url title='base URL'>base URL</dfn>.

<p class="note no-backref">A <a>base URL</a> is useful for
the <a>URL parser</a> when the input is potentially a
<a>relative URL</a>.


<h3 id=url-writing>Authoring Requirements</h3>

Two types of parse errors are defined.  <dfn title='parse exception'>Parse
exceptions</dfn> terminate parsing and must be implemented by all conforming
implementations.  By contrast, user agents are encouraged, but not required,
to expose <dfn title='conformance error'>conformance errors</dfn> somehow.
If parsing a given input results in the detection of multiple
<a>conformance errors</a>, user agents may chose to only report a subset of
the errors detected.

<!-- http://tantek.com/2011/238/b1/many-ways-slice-url-name-pieces -->

<p>A <a>URL</a> must be written as either a
<a>relative URL</a> or an
<a>absolute URL</a>, optionally followed by
"<code>#</code>" and a
<a title='URL fragment'>fragment</a>.

<p>An <dfn id=concept-absolute-url title='absolute URL'>absolute URL</dfn> must be a
<a title='URL scheme'>scheme</a>, followed by
"<code>:</code>", followed by either a
<a>scheme-relative URL</a>, if
<a title='URL scheme'>scheme</a> is a <a>relative scheme</a>, or
<a title='URL scheme data'>scheme data</a> otherwise, optionally followed
by "<code>?</code>" and a <a title='URL query'>query</a>.

<p>A <a title='URL scheme'>scheme</a> must be one
<a>ASCII alpha</a>, followed by zero or more of
<a>ASCII alphanumeric</a>, "<code>+</code>",
"<code>-</code>", and "<code>.</code>". A
<a title='URL scheme'>scheme</a> must be registered
<span class=XXX>...</span>.

<p>The syntax of <a title='URL scheme data'>scheme data</a>
depends on the <a title='URL scheme'>scheme</a> and is typically
defined alongside it. Standards must define
<a title='URL scheme data'>scheme data</a> within the constraints of zero or
more <a>URL units</a>, excluding "<code>?</code>".

<p>A <dfn id=concept-relative-url title='relative URL'>relative URL</dfn> must be either a
<a>scheme-relative URL</a>, an
<a>absolute-path-relative URL</a>,
or a <a>path-relative URL</a> that
does not start with a <a title='URL scheme'>scheme</a> and
"<code>:</code>", optionally followed by a "<code>?</code>" and
a <a title='URL query'>query</a>.

<p>At the point where a <a>relative URL</a> is
<a title='URL parser'>parsed</a>, a
<a>base URL</a> must be in scope.

<p>A <dfn id=concept-scheme-relative-url title='scheme-relative URL'>scheme-relative URL</dfn> must be
"<code>//</code>", optionally followed by
<a title='URL Userinfo'>userinfo</a> and "<code>@</code>",
followed by a <a>host</a>, optionally followed
by "<code>:</code>" and a <a title='URL port'>port</a>,
optionally followed by an
<a>absolute-path-relative URL</a>.

<p><dfn id=concept-url-userinfo title='URL Userinfo'>Userinfo</dfn> must be a
<a title='URL username'>username</a>, optionally followed by a
"<code>:</code>" and a
<a title='URL password'>password</a>.

<p>A <a title='URL username'>username</a> must be zero or more
<a>URL units</a>, excluding "<code>/</code>",
"<code>:</code>, "<code>?</code>", and "<code>@</code>".
<!-- password without ":" (sorted on ASCII position) -->

<p>A <a title='URL password'>password</a> must be zero or more
<a>URL units</a>, excluding "<code>/</code>",
"<code>?</code>", and "<code>@</code>".

<p>A <a>host</a> must be either a <a>domain</a>,
or an <a title='IPv4'>IPv4 address</a>, 
or "<code>[</code>" followed
by an <a title='IPv6'>IPv6 address</a> followed by
"<code>]</code>".

<p>A <a>domain</a> must be a string that is a
<a>valid domain</a>.

<p class=XXX>Textual representation of <a title='IPv4'>IPv4 address</a> does
not appear to be defined by an RFC.  See 
<a href="https://tools.ietf.org/html/draft-main-ipaddr-text-rep-00">Textual
Representation of IPv4 and IPv6 Addresses</a> for some history.

<p>An <a title='IPv6'>IPv6 address</a> is defined in the
<a href="http://tools.ietf.org/html/rfc4291#section-2.2">"Text Representation of Addresses" chapter of IP Version 6 Addressing Architecture</a>.
[[!RFC4291]]
<!-- http://tools.ietf.org/html/rfc5952 updates that RFC, but it seems as
     far as what developers can do we should be liberal

     XXX should we define the format inline instead just like STD 66? -->


<p>A <a title='URL port'>port</a> must be zero or more
<a>ASCII digits</a>.

<p>An
<dfn id=concept-absolute-path-relative-url title='absolute-path-relative URL'>absolute-path-relative URL</dfn>
must be "<code>/</code>", followed by a
<a>path-relative URL</a> that does not
start with "<code>/</code>".

<p>A <dfn id=concept-path-relative-url title='path-relative URL'>path-relative URL</dfn> must be zero or
more <a title="path segment">path segments</a> separated from each
other by a "<code>/</code>".  The first segment (if any) of a <a>path-relative
URL</a> must not contain a colon (<code>U+003A</code>).

<p>A <dfn>path segment</dfn> must be zero or more <a>URL units</a>,
excluding "<code>/</code>" and "<code>?</code>".

<p>A <a title='URL query'>query</a> must be zero or more
<a>URL units</a>.

<p>A <a title='URL fragment'>fragment</a> must be zero or more
<a>URL units</a>.

<p>The <dfn>URL code points</dfn> are <a>ASCII alphanumeric</a>,
"<code>!</code>",<!-- 0x21, sub-delims -->
"<code>$</code>",<!-- 0x24, sub-delims -->
"<code>&</code>",<!-- 0x26, sub-delims -->
"<code>'</code>",<!-- 0x27, sub-delims -->
"<code>(</code>",<!-- 0x28, sub-delims -->
"<code>)</code>",<!-- 0x29, sub-delims -->
"<code>*</code>",<!-- 0x2A, sub-delims -->
"<code>+</code>",<!-- 0x2B, sub-delims -->
"<code>,</code>",<!-- 0x2C, sub-delims -->
"<code>-</code>",<!-- 0x2D, iunreserved -->
"<code>.</code>",<!-- 0x2E, iunreserved -->
"<code>/</code>",<!-- 0x2F, iquery/ifragment -->
"<code>:</code>",<!-- 0x3A, ipchar -->
"<code>;</code>",<!-- 0x3B, sub-delims -->
"<code>=</code>",<!-- 0x3D, sub-delims -->
"<code>?</code>",<!-- 0x3F, iquery/ifragment -->
"<code>@</code>",<!-- 0x40, ipchar -->
"<code>_</code>",<!-- 0x5F, iunreserved -->
"<code>~</code>",<!-- 0x7E, iunreserved -->
and code points in the ranges
U+00A0 to U+D7FF,
U+E000 to <!--U+F8FF,
U+F900 to -->U+FDCF,
U+FDF0 to U+FFFD,<!-- changed relative to IRI from U+FFEF to U+FFFD to align with HTML-->
U+10000 to U+1FFFD,
U+20000 to U+2FFFD,
U+30000 to U+3FFFD,
U+40000 to U+4FFFD,
U+50000 to U+5FFFD,
U+60000 to U+6FFFD,
U+70000 to U+7FFFD,
U+80000 to U+8FFFD,
U+90000 to U+9FFFD,
U+A0000 to U+AFFFD,
U+B0000 to U+BFFFD,
U+C0000 to U+CFFFD,
U+D0000 to U+DFFFD,
U+E0000 to U+EFFFD,<!-- changed relative to IRI from E1000 to E0000 to align with HTML-->
U+F0000 to U+FFFFD,
U+100000 to U+10FFFD.

<p class=note>Code points higher than U+009F will be converted to
<a title="percent-encoded byte">percent-encoded bytes</a> by the
<a>URL parser</a>, except for code points appearing in
<a title="URL fragment">fragments</a>.

<p>The <dfn>URL units</dfn> are <a>URL code points</a> and
<a title="percent-encoded byte">percent-encoded bytes</a>.


<h3 id=url-parsing>Parsers</h3>

<p>The <dfn id=concept-url-parser title='URL parser'>URL parser</dfn> takes a string
<var>input</var>, optionally with a
<a>base URL</a> <var>base</var>, and
optionally with an <a>encoding</a>
<var>encoding override</var>, and then runs these steps:

<ol>
 <li><p>Let <var>url</var> be the result of running the
 <a>basic URL parser</a> on <var>input</var>
 with <var>base</var>, and <var>encoding override</var> as provided.

 <li><p>If <var>url</var> is failure, return failure.

 <li><p>If <var>url</var>'s <a title='URL scheme'>scheme</a> is not
 "<code>blob</code>", return <var>url</var>.

 <li><p>If <var>url</var>'s <a title='URL scheme data'>scheme data</a>
 is not in the <a>blob URL store</a>, return
 <var>url</var>. [[!FILEAPI]]

 <li><p>Set <var>url</var>'s <a title='URL object'>object</a> to a
 <a>structured clone</a> of the entry in the
 <a>blob URL store</a> corresponding to
 <var>url</var>'s <a title='URL scheme data'>scheme data</a>.
 [[!HTML]]

 <li><p>Return <var>url</var>.
</ol>

<hr>

<p>The <dfn id=concept-basic-url-parser title='basic URL parser'>basic URL parser</dfn> takes a string
<var>input</var>, optionally with a
<a>base URL</a> <var>base</var>,
optionally with an <a>encoding</a>
<var>encoding override</var>, optionally with an
<a>URL</a> <var>url</var> and a state override
<var>state override</var>, and then runs these steps:

<div class="note no-backref">
 <p>The <var>encoding override</var> argument is a legacy concept only relevant for
 HTML. The <var>url</var> and <var>state override</var> arguments are only for
 use by methods of objects implementing the <code><a interface>URLUtils</a></code> interface.
 [[!HTML]]

 <p>When the <var>url</var> and <var>state override</var> arguments are not
 passed the <a>basic URL parser</a> returns either a
 <a>URL</a> or failure. If they are passed the
 algorithm simply modifies the passed <var>url</var> and can terminate without
 returning anything.
</div>

<ol>
 <li>
  <p>If <var>url</var> is not given:

  <ol>
    <li><p>Set <var>url</var> to a new <a>URL</a>.

    <li><p>If leading or trailing <a>ASCII whitespace</a> codepoints are
    present in the <var>input</var>:</p>
    <ol>
      <li><p>Indicate a <a>conformance error</a>.</p></li>
      <li><p>Remove leading and trailing <a>ASCII whitespace</a> from
        <var>input</var>.<p></li>
    </ol>
  </ol>

 <li><p>If <var>base</var> is not given, set it a new <a>URL</a> with
 <code>scheme</code> set to <code>about</code>.

 <li><p>If <var>encoding override</var> is not given, set it to
 <a>utf-8</a>.

 <li>Invoke <code class=grammar-rule><a href=#url>url</a></code>
 on the <var>input</var> passing <var>url</var>, <var>base</var> and
 <var>encoding override</var>.

 <li><p>Return <var>url</var>.
</ol>


Parsing Rules {#parsing-rules}
---

These railroad diagrams, as modified by the accompanying text, define grammar
production rules for URLs.  They are to be evaluated sequentially, first
left-to-right then top-to-bottom, backtracking as necessary, until a complete
match against the input provided is found.

Each rule defines a function that can be invoked individually.  Rules can
invoke one another.

<dfn title="parse input">Parsing a given input</dfn> according to a railroad
diagram produces a number of intermediate values that can be referenced
individually as local variables within the function.  The names of those local
variables isn't specified by this specification, instead the names used in the
railroad diagrams are referenced.

If a given input doesn't match the railroad diagram, failure is returned
instead.  If failure is returned by an alternative, evaluation continues
with the next alternative.

The following conventions are used in descriptions of parsing logic for
clarity and conciseness:

 * The phrase "<code class=grammar-rule><span>x</span></code> 
     <dfn>is present</dfn>" is
     to be interpreted to mean "the grammar rule for
     <code class=grammar-rule><span>x</code><span> matches some part of the
     <code>input</code> when that <code>input</code> is parsed according to
     the given railroad diagram".  Note that if the railroad diagram contains
     alternatives where multiple alternatives could potentially match the
     input, only the first matching input is considered to be present.

 * The phrase "<dfn>value of</dfn> 
     <code class=grammar-rule><span>x</span></code>" is to be
     interpreted to mean "the value returned by the function
     <code>x(input)</code> when the function <code>x</code> is passed some
     part of the original <code>input</code> during the parsing of that
     original <code>input</code> according to the given railroad diagram".

Note: extracting the railroad diagrams from this specification and
interpreting them in isolation will produce incorrect results.  In particular,
the definitions provided in the prose modifies these parsing algorithms in
important ways including returning failure and early termination.

#include <url.pegjs>

Common Functions {#common-functions}
---

<p>To <dfn>percent encode</dfn> a <var>byte</var> into a
<a>percent-encoded byte</a>, return a string consisting of
"<code>%</code>", followed by a double-digit, uppercase, hexadecimal
representation of <var>byte</var>.

<p>To <dfn>percent decode</dfn> a byte sequence <var>input</var>, run these steps:

<p class=warning>Using anything but a <a>utf-8 decoder</a>
when the <var>input</var> contains bytes outside the range 0x00 to 0x7F might be
insecure and is not recommended.

<ol>
 <li><p>Let <var>output</var> be an empty byte sequence.

 <li>
  <p>For each byte <var>byte</var> in <var>input</var>, run these steps:

  <ol>
   <li><p>If <var>byte</var> is not `<code>%</code>`, append
   <var>byte</var> to <var>output</var>.

   <li><p>Otherwise, if <var>byte</var> is `<code>%</code>` and the next two
   bytes after <var>byte</var> in <var>input</var> are not in the ranges
   0x30 to 0x39, 0x41 to 0x46, and 0x61 to 0x66, append <var>byte</var> to
   <var>output</var>.

   <li>
    <p>Otherwise, run these substeps:

    <ol>
     <li><p>Let <var>bytePoint</var> be the two bytes after <var>byte</var> in
     <var>input</var>,
     <a title="utf-8 decode without BOM">decoded</a>, and
     then interpreted as hexadecimal number.
     <!-- We should have a definition for this that is saner. -->

     <li><p>Append a byte whose value is <var>bytePoint</var> to
     <var>output</var>.

     <li><p>Skip the next two bytes in <var>input</var>.
    </ol>
  </ol>

 <li><p>Return <var>output</var>.
</ol>

<p>To <dfn>utf-8 percent encode</dfn> a <var>code point</var>, using
an <var>encode set</var>, run these steps:

<ol>
 <li><p>If <var>code point</var> is not in
 <var>encode set</var>, return <var>code point</var>.

 <li><p>Let <var>bytes</var> be the result of running
 <a>utf-8 encode</a> on
 <var>code point</var>.

 <li><p><a>Percent encode</a> each byte in <var>bytes</var>, and
 then return them concatenated, in the same order.
</ol>

<p>The <dfn id=concept-domain-to-ascii title='domain to ASCII'>domain to
ASCII</dfn> function given a <a>domain</a> <var>domain</var>, runs these steps:

<ol>
 <li><p>Let <var>result</var> be the result of running
 <a title=ToASCII>Unicode ToASCII</a> with
 <i>domain_name</i> set to <var>domain</var>,
 <i>UseSTD3ASCIIRules</i> set to false, <i>processing_option</i> set to
 <i>Transitional_Processing</i>, and <i>VerifyDnsLength</i> set to false.

 <li><p>If <var>result</var> is a failure value, return failure.

 <li><p>Return <var>result</var>.
</ol>

<p>The <dfn id=concept-domain-to-unicode title='domain to Unicode'>domain to
Unicode</dfn> function given a <a>domain</a> <var>domain</var>, runs these
steps:

<ol>
 <li><p>Let <var>result</var> be the result of running
 <a title=ToUnicode>Unicode ToUnicode</a> with
 <i>domain_name</i> set to <var>domain</var>,
 <i>UseSTD3ASCIIRules</i> set to false.

 <li>
  <p>Return <var>result</var>, ignoring any returned errors.

  <p class=note>User agents are encouraged to report errors through a developer console.
</ol>

<p>A <var>domain</var> is a <dfn>valid domain</dfn> if these steps return success:

<ol>
 <li><p>Let <var>result</var> be the result of running
 <a title=ToASCII>Unicode ToASCII</a> with
 <i>domain_name</i> set to <var>domain</var>,
 <i>UseSTD3ASCIIRules</i> set to true, <i>processing_option</i> set to
 <i>Nontransitional_Processing</i>, and <i>VerifyDnsLength</i> set to true.

 <li><p>If <var>result</var> is a failure value, return failure.

 <li><p>Set <var>result</var> to the result of running
 <a title=ToUnicode>Unicode ToUnicode</a> with
 <i>domain_name</i> set to <var>result</var>,
 <i>UseSTD3ASCIIRules</i> set to true.

 <li><p>If <var>result</var> contains any errors, return failure.

 <li><p>Return success.
</ol>

<p class=XXX>Ideally we define this in terms of a sequence of code points that make up a
<a>valid domain</a> rather than through a whack-a-mole:
<a href=https://www.w3.org/Bugs/Public/show_bug.cgi?id=25334>bug 25334</a>.

<p>The <dfn id=concept-host-parser title='host parser'>host parser</dfn> takes
a string <var>input</var> and then runs these steps:

<ol>
 <li><p>If <var>input</var> is the empty string, return failure.
 <!-- Otherwise parsing URLs would not be idempotent:

      http://@/example.org/ -> http:///example.org/ -> http://example.org/

      Could potentially move this check to the URL parser if deemed problematic. -->

 <li><p>Let <var>domain</var> be the result of
 <a>utf-8 decode without BOM</a> on the
 <a title="percent decode">percent decoding</a> of
 <a>utf-8 encode</a> on <var>input</var>.
 <!-- https://bugzilla.mozilla.org/show_bug.cgi?id=309671 -->

 <li><p>Let <var>asciiDomain</var> be the result of running
 <a>domain to ASCII</a> on <var>domain</var>.

 <li><p>If <var>asciiDomain</var> is failure, return failure.

 <li>
  <p>If <var>asciiDomain</var> contains one of
  U+0000,
  U+0009,
  U+000A,
  U+000D,
  U+0020,
  "<code>#</code>",<!-- 23 -->
  "<code>%</code>",<!-- 25 -->
  "<code>/</code>",<!-- 2F -->
  "<code>:</code>",<!-- 3A -->
  "<code>?</code>",<!-- 3F -->
  "<code>@</code>",<!-- 40 -->
  "<code>[</code>",<!-- 5B -->
  "<code>\</code>",<!-- 5C -->
  and
  "<code>]</code>",<!-- 5D -->
  return failure.

 <li><p>Return <var>asciiDomain</var>.
</ol>


To <dfn>cleanse</dfn> a string given an <var>encode set</var>, run these steps:

<ol>
<li>If any character in the string not a <a>URL code point</a>
    or a percent sign (<code>U+0025</code>), indicate a <a>conformance
    error</a>.

<li>If the name includes a percent sign (<code>U+0025</code>) that is not
    immediately followed by two hexadecimal characters, indicate a
    <a>conformance error</a>.

<li>If any <code>U+0009</code>, <code>U+000A</code> or <code>U+000D</code>
    characters are present in the string, remove those characters and indicate
    a <a>conformance error</a>.

<li>if the <var>encode set</var> is non-null,
    first <a>encode</a> the
    result using the <code>encoding override</code>, then
    <a>percent encode</a>
    that result using the provided <var>encode set</var>.

<li>Return the result as a string.
</ol>

To do <dfn>path concatenation</dfn> given a <var>base</var> array of path
names, and a <var>path</path> array of names, run the following steps:

<ol>
<li>If <var>base</var> is null, set <var>base</var> to an empty array.
    Otherwise make a local copy of the <var>base</var> array.

<li>If the first element on <var>path</var> is ".", remove this first element
    from <var>path</var> as well as the last element (if any) of
    <var>base</var>.

<li>If <var>path.length</var> is one, and the first and only element on the
    <var>path</var> is an empty string, set <var>path</var> to the value of
    <var>base</var>.

<li>Otherwise if <var>path.length</var> is greater than one, and the first
    element on the <var>path</var> is the empty string, remove the first
    element from the <var>path</var>.

<li>Otherwise, remove the last element (if any) of <var>base</var> and then
    prepend the values of the <var>base</var> array to the <var>path</var>
    array.
</ol>


<h3 id=url-serializing>Serializers</h3>

<p>The <dfn id=concept-url-serializer title='URL serializer'>URL serializer</dfn> takes a
<a>URL</a> <var>url</var>,
optionally an <i title>exclude fragment flag</i>, and then runs these steps:

<ol>
 <li><p>Let <var>output</var> be <var>url</var>'s
 <a title='URL scheme'>scheme</a> and
 "<code>:</code>" concatenated.

 <li>
  <p>If <var>url</var>'s <a title='URL scheme data'>scheme data</a> is unset:

  <ol>
   <li><p>Append "<code>//</code>" to <var>output</var>.

   <li>
    <p>If <var>url</var>'s
    <a title='URL username'>username</a> is not the empty string
    or <var>url</var>'s
    <a title='URL password'>password</a> is non-null, run these
    substeps:

    <ol>
     <li><p>Append <var>url</var>'s
     <a title='URL username'>username</a> to
     <var>output</var>.

     <li><p>If <var>url</var>'s
     <a title='URL password'>password</a> is non-null, append
     "<code>:</code>" concatenated with <var>url</var>'s
     <a title='URL password'>password</a> to
     <var>output</var>.

     <li><p>Append "<code>@</code>" to <var>output</var>.
    </ol>

   <li><p>Append <var>url</var>'s
   <a title='URL host'>host</a>,
   <a title='host serializer'>serialized</a>, to
   <var>output</var>.

   <li><p>If <var>url</var>'s <a title='URL port'>port</a>
   is not the empty string, append "<code>:</code>" concatenated with
   <var>url</var>'s <a title='URL port'>port</a> to
   <var>output</var>.

   <li><p>Append "<code>/</code>" concatenated with the strings in
   <var>url</var>'s <a title='URL path'>path</a>
   (including empty strings), separated from each other by
   "<code>/</code>" to <var>output</var>.
  </ol>

 <li><p>Otherwise, append <var>url</var>'s
 <a title='URL scheme data'>scheme data</a> to
 <var>output</var>.

 <li><p>If <var>url</var>'s <a title='URL query'>query</a> is non-null,
 append "<code>?</code>" concatenated with <var>url</var>'s
 <a title='URL query'>query</a> to <var>output</var>.

 <li><p>If the <i title>exclude fragment flag</i> is unset and
 <var>url</var>'s <a title='URL fragment'>fragment</a> is
 non-null, append  "<code>#</code>" concatenated with
 <var>url</var>'s <a title='URL fragment'>fragment</a> to
 <var>output</var>.

 <li><p>Return <var>output</var>.
</ol>

<p>The <dfn id=concept-host-serializer title='host serializer'>host serializer</dfn> takes null or a
<a>host</a> <var>host</var> and then runs
these steps:

<ol>
 <li><p>If <var>host</var> is null, return the empty string.

 <li><p>If <var>host</var> is an
 <a title='IPv6'>IPv6 address</a>, return
 "<code>[</code>", followed by the result of running the
 <a>IPv6 serializer</a> on <var>host</var>,
 followed by "<code>]</code>".

 <li><p>Otherwise, <var>host</var> is a <a>domain</a> or an
 <a title='IPv4'>IPv4 address</a>,
 return <var>host</var>.
</ol>

<p>The <dfn id=concept-ipv6-serializer title='IPv6 serializer'>IPv6 serializer</dfn> takes an
<a title='IPv6'>IPv6 address</a> <var>address</var> and
then runs these steps:

<ol>
 <li><p>Let <var>output</var> be the empty string.

 <li>
  <p>Let <var>compress pointer</var> be a pointer to the first
  <a title='IPv6 piece'>16-bit piece</a> in the first longest
  sequences of <var>address</var>'s
  <a title='IPv6 piece'>16-bit pieces</a> that are 0.

  <p class=example>In <code>0:f:0:0:f:f:0:0</code> it would point to
  the second 0.

 <li><p>If there is no sequence of <var>address</var>'s
 <a title='IPv6 piece'>16-bit pieces</a> that are 0 longer than
 one, set <var>compress pointer</var> to null.

 <li>
  <p>For each <var>piece</var> in <var>address</var>'s
  <a title='IPv6 piece'>pieces</a>, run these substeps:

  <ol>
   <li><p>If <var>compress pointer</var> points to
   <var>piece</var>, append "<code>::</code>" to
   <var>output</var> if <var>piece</var> is
   <var>address</var>'s first <a title='IPv6 piece'>piece</a> and append
   "<code>:</code>" otherwise, and then run these substeps again with all
   subsequent <a title='IPv6 piece'>pieces</a> in
   <var>address</var>'s <a title='IPv6 piece'>pieces</a>
   that are 0 skipped or go the next step in the overall set of steps if
   that leaves no <a title='IPv6 piece'>pieces</a>.

   <li><p>Append <var>piece</var>, represented as the shortest
   possible lowercase hexadecimal number, to <var>output</var>.

   <li><p>If <var>piece</var> is not
   <var>address</var>'s last <a title='IPv6 piece'>piece</a>,
   append "<code>:</code>" to <var>output</var>.
  </ol>

 <li><p>Return <var>output</var>.
</ol>

<p class=note>This algorithm requires the recommendation from
A Recommendation for IPv6 Address Text Representation.
[[RFC5952]]

<!-- Safari/Gecko/Opera do not normalize IPv6. Chrome does. This algorithm
     follows Chrome because we normalize domains too. -->


<h3 id=origin>Origin</h3>
<!-- Still need to watch the final bits -->

<p class=note>See <a spec=html>origin</a>'s definition in HTML for the
necessary background information. [[!HTML]]

<p>A <a>URL</a>'s <dfn id=concept-url-origin title='URL origin'>origin</dfn> is
the <a spec=html>origin</a> returned by running these steps, switching
on <a>URL</a>'s <a title='URL scheme'>scheme</a>:

<dl class=switch>
 <dt>"<code>blob</code>"
 <dd>
  <p>Let <var>url</var> be the result of
  <a title='basic URL parser'>parsing</a>
  <a>URL</a>'s
  <a title='URL scheme data'>scheme data</a>.

  <p>If <var>url</var> is failure, return a new globally unique identifier.
  Otherwise, return <var>url</var>'s <a title='URL origin'>origin</a>.
  <!-- Did you mean: recursion -->

  <p class="example no-backref">The <a title='URL origin'>origin</a> of
  <code>blob:https://whatwg.org/d0360e2f-caee-469f-9a2f-87d5b0456f6f</code> is
  the tuple
  (<code>https</code>, <code>whatwg.org</code>, <code>443</code>).

 <dt>"<code>ftp</code>"
 <dt>"<code>gopher</code>"
 <dt>"<code>http</code>"
 <dt>"<code>https</code>"
 <dt>"<code>ws</code>"
 <dt>"<code>wss</code>"
 <dd><p>Return a tuple consisting of <a>URL</a>'s
 <a title='URL scheme'>scheme</a>, its
 <a title='URL host'>host</a>, and its <a>default port</a> if its
 <a title='URL port'>port</a> is the empty string, and its
 <a title='URL port'>port</a> otherwise.

 <dt>"<code>file</code>"
 <dd><p>Unfortunate as it is, this is left as an exercise to the reader. When in doubt,
 return a new globally unique identifier.

 <dt>Otherwise
 <dd><p>Return a new globally unique identifier.
</dl>


<h2 id=api>APIs</h2>

<!-- XXX https://www.w3.org/Bugs/Public/show_bug.cgi?id=20159 -->

<pre class=idl>[Constructor(USVString url, optional USVString base = "about:blank"),
 Exposed=(Window,Worker)]
interface URL {
  static USVString domainToASCII(USVString domain);
  static USVString domainToUnicode(USVString domain);
  static boolean inScope(USVString scopeURL, USVString targetURL);
};
URL implements URLUtils;

[NoInterfaceObject,
 Exposed=(Window,Worker)]
interface URLUtils {
  stringifier attribute USVString href;
  readonly attribute USVString origin;

           attribute USVString protocol;
           attribute USVString username;
           attribute USVString password;
           attribute USVString host;
           attribute USVString hostname;
           attribute USVString port;
           attribute USVString pathname;
           attribute USVString search;
           attribute URLSearchParams searchParams;
           attribute USVString hash;
};

[NoInterfaceObject,
 Exposed=(Window,Worker)]
interface URLUtilsReadOnly {
  stringifier readonly attribute USVString href;
  readonly attribute USVString origin;

  readonly attribute USVString protocol;<!--
  readonly attribute USVString username;
  readonly attribute USVString password;-->
  readonly attribute USVString host;
  readonly attribute USVString hostname;
  readonly attribute USVString port;
  readonly attribute USVString pathname;
  readonly attribute USVString search;<!--
  readonly attribute URLSearchParams searchParams;-->
  readonly attribute USVString hash;
};</pre>

<p>Except where different objects implementing <code><a interface>URLUtilsReadOnly</a></code> are identical
to objects implementing <code><a interface>URLUtils</a></code>.

<p class=note>Since all members are readonly and certain members from
<code><a interface>URLUtils</a></code> are not exposed a number of potential optimizations is possible
compared to objects implementing <code><a interface>URLUtils</a></code>. These are left as an exercise to
the reader.

<!-- XXX Ideas:
  boolean isEqual(URL, optional URLEqualOptions options)
           attribute URLPath segments;

dictionary URLEqualOptions {
  boolean percentEncoding = false;
  boolean ignoreHash = false;
  boolean ignoreDomainDot = false;
  ...
};

URLPath would be a subclassed Array? -->

<p>Specifications defining objects implementing <code><a interface>URLUtils</a></code> or
<code><a interface>URLUtilsReadOnly</a></code> must define a
<dfn id=concept-URLUtils-get-the-base title='URLUtils get the base'>get the base</dfn> algorithm, which must return the
appropriate <a>base URL</a> for the object.

<p>Specifications defining objects implementing <code><a interface>URLUtils</a></code> may
define <dfn id=concept-URLUtils-update title='URLUtils update'>update steps</dfn> to make it possible for an
underlying string (such as an
<a title=concept-attribute-value>attribute value</a>)
to be updated. The <a title='URLUtils update'>update steps</a> are passed a string
<var>value</var> for this purpose.

<p>An object implementing <code><a interface>URLUtils</a></code> or <code><a interface>URLUtilsReadOnly</a></code> has an
associated <dfn id=concept-URLUtils-input title='URLUtils input'>input</dfn> (a string),
<dfn id=concept-URLUtils-query-encoding title='URLUtils query encoding'>query encoding</dfn>
(an <a>encoding</a>),
<dfn id=concept-URLUtils-query-object title='URLUtils query object'>query object</dfn>
(a <code><a interface>URLSearchParams</a></code> object or null), and a
<dfn id=concept-URLUtils-url title='URLUtils URL'>url</dfn> (a <a>URL</a> or null).

Unless stated otherwise, <a title='URLUtils query encoding'>query encoding</a> is
<a>utf-8</a> and
<a title='URLUtils query object'>query object</a> is null. The others follow
from the <a title='URLUtils set the input'>set the input</a> algorithm.

<p class=note>The associated
<a title='URLUtils query encoding'>query encoding</a> is a legacy
concept only relevant for HTML.
[[!HTML]]

<p>Specifications defining objects implementing <code><a interface>URLUtils</a></code> or
<code><a interface>URLUtilsReadOnly</a></code> must use the
<a title='URLUtils set the input'>set the input</a> algorithms to set
<a title='URLUtils input'>input</a>, <a title='URLUtils URL'>url</a>, and
<a title='URLUtils query object'>query object</a>. To
<dfn id=concept-URLUtils-set-the-input title='URLUtils set the input'>set the input</dfn> given <var>input</var>
and optionally a <var>url</var>, run these steps:

<ol>
 <li><p>If <var>url</var> is given, set <a title='URLUtils URL'>url</a>
 to <var>url</var> and <a title='URLUtils input'>input</a> to
 <var>input</var>.

 <li>
  <p>Otherwise, run these substeps:

  <ol>
   <li><p>Set <a title='URLUtils URL'>url</a> to null.

   <li><p>If <var>input</var> is null, set
   <a title='URLUtils input'>input</a> to the empty string.

   <li>
    <p>Otherwise, run these subsubsteps:

    <ol>
     <li><p>Set <a title='URLUtils input'>input</a> to <var>input</var>.

     <li><p>Let <var>url</var> be the result of running the
     <a>URL parser</a> on
     <a title='URLUtils input'>input</a> with
     <a>base URL</a> being the result of running
     <a title='URLUtils get the base'>get the base</a> and
     <a title='URLUtils query encoding'>query encoding</a> as
     <var>encoding override</var>.
     <!-- support blob URLs at this level -->

     <li><p>If <var>url</var> is not failure, set
     <a title='URLUtils URL'>url</a> to <var>url</var>.
    </ol>
  </ol>

 <li><p>Let <var>query</var> be <a title='URLUtils URL'>url</a>'s
 <a title='URL query'>query</a> if <a title='URLUtils URL'>url</a>
 is non-null, and the empty string otherwise.

 <li><p>If <a title='URLUtils query object'>query object</a> is null, set
 <a title='URLUtils query object'>query object</a> to a
 <code><a title='URLSearchParams new'>new <a interface>URLSearchParams</a></code> object</a>
 using <var>query</var>, and then append the
 <a>context object</a> to
 <a title='URLUtils query object'>query object</a>'s list of
 <a title='URLSearchParams URL object'>url objects</a>.

 <li><p>Otherwise, set <a title='URLUtils query object'>query object</a>'s
 <a title='URLSearchParams list'>list</a> to the result of
 <a title='urlencoded string parser'>parsing</a> <var>query</var>.
</ol>

<p>To run the <dfn>pre-update steps</dfn> for an object implementing
<code><a interface>URLUtils</a></code>, optionally given a <var>value</var>, run these steps:

<ol>
 <li><p>If <var>value</var> is not given, let <var>value</var> be the result
 of <a title='URL serializer'>serializing</a> the associated
 <a title='URLUtils URL'>url</a>.
 <!-- these steps are always invoked with a value if url can be null -->

 <li><p>Run the <a title='URLUtils update'>update steps</a> with
 <var>value</var>.
</ol>


<h3 id=constructors>Constructors</h3> <!-- "constructor" causes dfn.js to fail -->

<p>The
<dfn constructor dfn-for=URL><code>URL(<var>url</var>, <var>base</var>)</code></dfn>
constructor, when invoked, must run these steps:

<ol>
 <li><p>Let <var>parsedBase</var> be the result of running the
 <a>basic URL parser</a> on <var>base</var>.

 <li><p>If <var>parsedBase</var> is failure,
 <a>throw</a> a <code>TypeError</code> exception.

 <li><p>Set <var>parsedURL</var> to the result of running the
 <a>basic URL parser</a> on <var>url</var>
 with <var>parsedBase</var>.

 <li><p>If <var>parsedURL</var> is failure,
 <a>throw</a> a <code>TypeError</code> exception.

 <li><p>Let <var>result</var> be a new <code><a interface>URL</a></code> object.

 <li><p>Let <var>result</var>'s
 <a title='URLUtils get the base'>get the base</a> return
 <var>parsedBase</var>.

 <li>
  <p>Run <var>result</var>'s
  <a title='URLUtils set the input'>set the input</a> given the empty string
  and <var>parsedURL</var>.

  <p class="note no-backref">A <code><a interface>URL</a></code> object's
  <a title='URLUtils input'>input</a> is never exposed.

 <li><p>Return <var>result</var>.
</ol>

<div class=example>
 <p>To <a title='basic URL parser'>Basic URL parse</a> a string into a
 <a>URL</a> without using a
 <a>base URL</a>, invoke the constructor with a single
 argument:

 <pre>var input = "https://example.org/💩",
    url = new URL(input)
url.pathname // "/%F0%9F%92%A9"</pre>

 <p>Alternatively you can use the <a>base URL</a> of a
 <a title=concept-document>document</a> through
 <code><a title=dom-Node-baseURI>baseURI</a></code>:

 <pre>var input = "/💩",
    url = new URL(input, document.baseURI)
url.href // "https://url.spec.whatwg.org/%F0%9F%92%A9"</pre>
</div>


<h3 id=url-statics><code><a interface>URL</a></code> statics</h3>

<p>The
<dfn method dfn-for=URL><code>domainToASCII(<var>domain</var>)</code></dfn>
static method, when invoked, must run these steps:

<ol>
 <li><p>Let <var>asciiDomain</var> be the result of
 invoking <code class=grammar-rule><a href=#rule-host>host</a></code> with
 <var>domain</var> as input.

 <li><p>If <var>asciiDomain</var> matches
 <code class=grammar-rule><a href=#rule-ipv6addr>ipv6addr</a></code> or
 <code class=grammar-rule><a href=#rule-ipv4addr>ipv4addr</a></code> or
 failure, return the empty string.

 <li><p>Return <var>asciiDomain</var>.
</ol>

<p>The
<dfn method dfn-for=URL><code>domainToUnicode(<var>domain</var>)</code></dfn>
static method, when invoked, must run these steps:

<ol>
 <li><p>Let <var>asciiDomain</var> be the result of invoking
 <a link-for=URL method title=domainToASCII()>domainToASCII</a> with
 <var>domain</var> as input.

 <li><p>Return the result of running <a>domain to Unicode</a>
 on <var>asciiDomain</var>.
</ol>

<p class=XXX>Add domainToUI() which follows the UA conventions for when to use the Unicode
representation?

<p>The 
<dfn method dfn-for=URL><code>inScope(<var>scopeURL</var>,<var>targetURL</var>)</code></dfn>
static method, when invoked, must run these steps:

<ol>
   <li>Let <var>scope</var> be a new URL using <var>scopeURL</var> as input.</li>
   <li>Let <var>target</var> be a new URL using <var>targetURL</var> as input.</li>
   <li>If during construction <var>scope<var> or <var>target</var> raises an exception <var>e</var>, 
       throw <var>e</var> and terminate these steps.</li>  
   <li>If <var>scope</var> is not same origin as <var>target</var>, return false.</li>
   <li>If <var>target</var>'s <code><a attribute for=URLUtils>pathname</a></code> starts with 
       <var>scope</var>'s <code><a attribute for=URLUtils>pathname</a></code>, return true.</li>
   <li>Otherwise, return false.</li>
</ol>

<h3 id=urlutils-and-urlutilsreadonly-members><code><a interface>URLUtils</a></code> and <code><a interface>URLUtilsReadOnly</a></code> members</h3>

<p class=note>The <code><a interface>URLUtils</a></code> and <code><a interface>URLUtilsReadOnly</a></code> interfaces are
not exposed on the global object. They are meant to augment other interfaces, such as
<code><a interface>URL</a></code>.

<p>The <dfn attribute dfn-for=URLUtilsReadOnly><dfn attribute dfn-for=URLUtils><code>href</code></dfn></dfn> attribute's getter must run
these steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null, return
 <a title='URLUtils input'>input</a>.

 <li><p>Return the <a title='URL serializer'>serialization</a>
 of <a title='URLUtils URL'>url</a>.
</ol>

<p>The <code><a attribute for=URLUtils>href</a></code> attribute's setter must run these steps:

<ol>
 <li><p>Let <var>input</var> be the given value.

 <li>
  <p>If the <code><a>context object</a></code> is a 
  <code><a interface>URL</a></code> object, run these substeps:

  <ol>
   <li><p>Let <var>parsedURL</var> be the result of running the
   <a>basic URL parser</a> on <var>input</var>
   with <a>base URL</a> being the result of running
   <a title='URLUtils get the base'>get the base</a>.

   <li><p>If <var>parsedURL</var> is failure,
   <a>throw</a> a <code>TypeError</code> exception.

   <li>
    <p>Run <a title='URLUtils set the input'>set the input</a> given the empty
    string and <var>parsedURL</var>.

    <p class="note no-backref">A <code><a interface>URL</a></code> object's
    <a title='URLUtils input'>input</a> is never exposed.
  </ol>

 <li>
  <p>Otherwise, run these substeps:

  <ol>
   <li><p>Run the <a title='URLUtils set the input'>set the input</a>
   algorithm for <var>input</var>.

   <li><p>Run the <a>pre-update steps</a> with the <var>input</var>.
  </ol>

  <div class=example>
   <p>This means that if the <code><a attribute for=URLUtils>href</a></code> attribute is set to
   value that would cause the <a>URL parser</a> to return
   failure, that value is still passed through unchanged. This is one of those unfortunate
   legacy incidents.

   <pre>var a = document.createElement("a"),
    input = "https://test:test/" // invalid port makes the parser return failure
a.href = test
a.href === test // true</pre>
  </div>
</ol>

<p>The <dfn attribute dfn-for=URLUtilsReadOnly><dfn attribute dfn-for=URLUtils><code>origin</code></dfn></dfn> attribute's getter must
run these steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null, return the empty
 string.

 <li><p>Return the
 <a title="Unicode serialization of an origin">Unicode serialization</a>
 of <a title='URLUtils URL'>url</a>'s <a title='URL origin'>origin</a>.
 [[!HTML]]
</ol>

<p class=note>It returns the Unicode rather than the ASCII serialization for
compatibility with HTML's <code>MessageEvent</code> feature.
[[!HTML]]

<p>The <dfn attribute dfn-for=URLUtilsReadOnly><dfn attribute dfn-for=URLUtils><code>protocol</code></dfn></dfn> attribute's getter
must run these steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null, return
 "<code>:</code>".

 <li><p>Return <a title='URL scheme'>scheme</a> and
 "<code>:</code>" concatenated.
</ol>

<p>The <code><a attribute for=URLUtils>protocol</a></code> attribute's setter must
run these steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null, terminate
 these steps.

 <li>Invoke <code class=grammar-rule><a href=#rule-set-protocol>set-protocol</a></code>
 on the <var>input</var> with
 <a title='URLUtils URL'>url</a> as <var>url</var>.

 <li><p>Run the <a>pre-update steps</a>.
</ol>

<p>The <dfn attribute dfn-for=URLUtils><code>username</code></dfn> attribute's getter
must run these steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null, return the
 empty string.

 <li><p>Return <a title='URL username'>username</a>.
</ol>

<p>The <code><a attribute for=URLUtils>username</a></code> attribute's setter must
run these steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null, or its
 <a title='URL scheme data'>scheme data</a> is set, terminate these steps.

 <li><p>Set <var>url</var>'s <a title='URL username'>username</a> to the
 empty string.

 <li><p>For each code point in <var>username</var>,
 <a>utf-8 percent encode</a> it using the <a>username encode set</a>, and
 append the result to <var>url</var>'s
 <a title='URL username'>username</a>.

 <li><p>Run the <a>pre-update steps</a>.
</ol>

<p>The <dfn attribute dfn-for=URLUtils><code>password</code></dfn> attribute's getter
must run these steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null or its
 <a title='URL password'>password</a> is null, return the empty
 string.

 <li><p>Return <a title='URL password'>password</a>.
</ol>

<p class=XXX>The resolution of
<a href=https://www.w3.org/Bugs/Public/show_bug.cgi?id=27516>bug 27516</a>
may remove the ability to access passwords from scripts.


<p>The <code><a attribute for=URLUtils>password</a></code> attribute's setter must
run these steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null, or its
 <a title='URL scheme data'>scheme data</a> is set, terminate these steps.

 <li><p>If <var>password</var> is the empty string, set <var>url</var>'s
 <a title='URL password'>password</a> to null.

 <li>
  <p>Otherwise, run these substeps:

  <ol>
   <li><p>Set <var>url</var>'s <a title='URL password'>password</a> to
   the empty string.

   <li><p>For each code point in <var>password</var>,
   <a>utf-8 percent encode</a> it using the <a>password encode set</a>, and
   append the result to <var>url</var>'s
   <a title='URL password'>password</a>.
  </ol>

 <li><p>Run the <a>pre-update steps</a>.
</ol>

<p>The <dfn attribute dfn-for=URLUtilsReadOnly><dfn attribute dfn-for=URLUtils><code>host</code></dfn></dfn> attribute's getter must run
these steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null, return the
 empty string.

 <li><p>If <a title='URL port'>port</a> is the empty string,
 return <a title='URL host'>host</a>,
 <a title='host serializer'>serialized</a>.

 <li><p>Return <a title='URL host'>host</a>,
 <a title='host serializer'>serialized</a>,
 "<code>:</code>", and <a title='URL port'>port</a>
 concatenated.
</ol>

<p>The <code><a attribute for=URLUtils>host</a></code> attribute's setter must run these
steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null, or its
 <a title='URL scheme data'>scheme data</a> is set, terminate these steps.

 <li>Invoke <code class=grammar-rule><a href=#rule-set-host>set-host</a></code>
 on the <var>input</var> with
 <a title='URLUtils URL'>url</a> as <var>url</var>.

 <li><p>Run the <a>pre-update steps</a>.
</ol>

<p>The <dfn attribute dfn-for=URLUtilsReadOnly><dfn attribute dfn-for=URLUtils><code>hostname</code></dfn></dfn> attribute's getter
must run these steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null, return the
 empty string.

 <li><p>Return <a title='URL host'>host</a>,
 <a title='host serializer'>serialized</a>.
</ol>

<p>The <code><a attribute for=URLUtils>hostname</a></code> attribute's setter must
run these steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null, or its
 <a title='URL scheme data'>scheme data</a> is set, terminate these steps.

 <li>Invoke <code class=grammar-rule><a href=#rule-set-hostname>set-hostname</a></code>
 on the <var>input</var> with
 <a title='URLUtils URL'>url</a> as <var>url</var>.

 <li><p>Run the <a>pre-update steps</a>.
</ol>

<p>The <dfn attribute dfn-for=URLUtilsReadOnly><dfn attribute dfn-for=URLUtils><code>port</code></dfn></dfn> attribute's getter must run
these steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null, return the
 empty string.

 <li><p>Return <a title='URL port'>port</a>.
</ol>

<p>The <code><a attribute for=URLUtils>port</a></code> attribute's setter must run these steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null, its
 <a title='URL scheme data'>scheme data</a> is set, or its
 <a title='URL scheme'>scheme</a> is "<code>file</code>",
 terminate these steps.

 <li>Otherwise, invoke <code class=grammar-rule><a href=#rule-set-port>set-port</a></code>
  on the <var>input</var> with <a title='URLUtils URL'>url</a> as
  <var>url</var>.

 <li><p>Run the <a>pre-update steps</a>.
</ol>

<p>The <dfn attribute dfn-for=URLUtilsReadOnly><dfn attribute dfn-for=URLUtils><code>pathname</code></dfn></dfn> attribute's getter
must run these steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null, return the
 empty string.

 <li><p>If the <a title='URL scheme data'>scheme data</a> is set, return
 <a title='URL scheme data'>scheme data</a>.

 <li><p>Return "<code>/</code>" concatenated with the strings in
 <a title='URL path'>path</a> (including empty strings),
 separated from each other by "<code>/</code>".
</ol>

<p>The <code><a attribute for=URLUtils>pathname</a></code> attribute's setter must
run these steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null, or its
 <a title='URL scheme data'>scheme data</a> is set, terminate these steps.

 <li><p>Empty <a title='URL path'>path</a>.

 <li>Invoke <code class=grammar-rule><a href=#rule-set-pathname>set-pathname</a></code>
 on the <var>input</var> with
 <a title='URLUtils URL'>url</a> as <var>url</var>.

 <li><p>Run the <a>pre-update steps</a>.
</ol>

<p>The <dfn attribute dfn-for=URLUtilsReadOnly><dfn attribute dfn-for=URLUtils><code>search</code></dfn></dfn> attribute's getter must
run these steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null, or its
 <a title='URL query'>query</a> is either null or
 the empty string, return the empty string.

 <li><p>Return "<code>?</code>" concatenated with
 <a title='URL query'>query</a>.
</ol>

<p>The <code><a attribute for=URLUtils>search</a></code> attribute's setter must run these steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null, terminate these steps.

 <li><p>If the given value is the empty string, set
 <a title='URL query'>query</a> to null, empty
 <a title='URLUtils query object'>query object</a>'s
 <a title='URLSearchParams list'>list</a>, run its
 <a title='URLSearchParams update'>update steps</a>, and terminate these
 steps.

 <li><p>Let <var>input</var> be the given value with a single leading
 "<code>?</code>" removed, if any.

 <li><p>Set <a title='URL query'>query</a> to the empty string.

 <li>Invoke <code class=grammar-rule><a href=#rule-set-search>set-search</a></code>
 on the <var>input</var>
 with <a title='URLUtils URL'>url</a> as <var>url</var>, and the
 associated <a title='URLUtils query encoding'>query encoding</a> as
 <var>encoding override</var>.

 <li><p>Set <a title='URLUtils query object'>query object</a>'s
 <a title='URLSearchParams list'>list</a> to the result of
 <a title='urlencoded string parser'>parsing</a> <var title="">input</var>.

 <li><p>Run <a title='URLUtils query object'>query object</a>'s
 <a title='URLSearchParams update'>update steps</a>.
</ol>

<p class="note no-backref">The <a title='URLSearchParams update'>update steps</a> of
<a title='URLUtils query object'>query object</a> are run to ensure all
<a title='URLSearchParams URL object'>url objects</a> remain synchronized.

<p>The <dfn attribute dfn-for=URLUtils><code>searchParams</code></dfn> attribute's getter
must return the <a title='URLUtils query object'>query object</a>.

<p>The <code><a attribute for=URLUtils>searchParams</a></code> attribute's setter must run
these steps:

<ol>
 <li><p>Let <var>object</var> be the given value.

 <li><p>Remove the <a>context object</a> from
 <a title='URLUtils query object'>query object</a>'s list of
 <a title='URLSearchParams URL object'>url objects</a>.

 <li><p>Append the <a>context object</a> to
 <var>object</var>'s list of
 <a title='URLSearchParams URL object'>url objects</a>.

 <li><p>Set <a title='URLUtils query object'>query object</a> to
 <var>object</var>.

 <li><p>Set <a title='URL query'>query</a> to the
 <a title='urlencoded serializer'>serialization</a> of the
 <a title='URLUtils query object'>query object</a>'s
 <a title='URLSearchParams list'>list</a>.

 <li><p>Run the <a>pre-update steps</a>.
</ol>

<p>The <dfn attribute dfn-for=URLUtilsReadOnly><dfn attribute dfn-for=URLUtils><code>hash</code></dfn></dfn> attribute's getter must run
these steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null, or its
 <a title='URL fragment'>fragment</a> is either null or
 the empty string, return the empty string.

 <li><p>Return "<code>#</code>" concatenated with
 <a title='URL fragment'>fragment</a>.
</ol>

<p>The <code><a attribute for=URLUtils>hash</a></code> attribute's setter must run these steps:

<ol>
 <li><p>If <a title='URLUtils URL'>url</a> is null, or its
 <a title='URL scheme'>scheme</a> is
 "<code>javascript</code>", terminate these steps.

 <li><p>If the given value is the empty string, set
 <a title='URL fragment'>fragment</a> to null, run the
 <a>pre-update steps</a>, and terminate these steps.

 <li><p>Let <var>input</var> be the given value with a single leading
 "<code>#</code>" removed, if any.

 <li><p>Set <a title='URL fragment'>fragment</a> to
 the empty string.

 <li>Invoke <code class=grammar-rule><a href=#rule-set-hash>set-hash</a></code>
 on the <var>input</var>
 with <a title='URLUtils URL'>url</a> as <var>url</var>.

 <li><p>Run the <a>pre-update steps</a>.
</ol>


<h3 id=interface-urlsearchparams>Interface <code><a interface>URLSearchParams</a></code></h3>

<pre class=idl>[Constructor(optional (USVString or URLSearchParams) init = ""),
 Exposed=(Window,Worker)]
interface URLSearchParams {
  void append(USVString name, USVString value);
  void delete(USVString name);
  USVString? get(USVString name);
  sequence&lt;USVString> getAll(USVString name);
  boolean has(USVString name);
  void set(USVString name, USVString value);
  iterable&lt;USVString, USVString>;
  stringifier;
};</pre>

<p>A <code><a interface>URLSearchParams</a></code> object has an associated
<dfn id=concept-URLSearchParams-list title='URLSearchParams list'>list</dfn> of name-value pairs, which is initially
empty.

<p>A <code><a interface>URLSearchParams</a></code> object has an associated list of zero or more
<dfn id=concept-URLSearchParams-url-object title='URLSearchParams URL object'>url objects</dfn>, which is initially empty.

<p class=note><code><a interface>URLSearchParams</a></code> objects always use
<a>utf-8</a> as
<a>encoding</a>, despite the existence of
concepts such as
<a title='URLUtils query encoding'>query encoding</a>. This is to
encourage developers to migrate towards
<a>utf-8</a>, which they really ought to
have done a long time ago now.

<p>To create a
<dfn id=concept-URLSearchParams-new title='URLSearchParams new'>new <code><a interface>URLSearchParams</a></code> object</dfn>, optionally
using <var>init</var>, run these steps:

<ol>
 <li><p>Let <var>query</var> be a new <code><a interface>URLSearchParams</a></code> object.

 <li><p>If <var>init</var> is the empty string or null, return
 <var>query</var>.
 <!-- Beware: new URLSearchParams(null) is equivalent to new URLSearchParams("null") -->

 <li><p>If <var>init</var> is a string,
 set <var>query</var>'s <a title='URLSearchParams list'>list</a> to the
 result of <a title='urlencoded string parser'>parsing</a>
 <var>init</var>.

 <li><p>If <var>init</var> is a <code><a interface>URLSearchParams</a></code> object, set
 <var>query</var>'s <a title='URLSearchParams list'>list</a> to a copy
 of <var>init</var>'s <a title='URLSearchParams list'>list</a>.

 <li><p>Return <var>query</var>.
</ol>

<p>A <code><a interface>URLSearchParams</a></code> object's
<dfn id=concept-URLSearchParams-update title='URLSearchParams update'>update steps</dfn> are to run these steps for
each associated  <a title='URLSearchParams URL object'>url object</a>
<var>urlObject</var>, in order:

<ol>
 <li><p>Set <var>urlObject</var>'s <a title='URLUtils URL'>url</a>'s
 <a title='URL query'>query</a> to the
 <a title='urlencoded serializer'>serialization</a> of
 <code><a interface>URLSearchParams</a></code> object's
 <a title='URLSearchParams list'>list</a>.

 <li><p>Run <var>urlObject</var>'s <a>pre-update steps</a>.
</ol>

<p>The
<dfn constructor dfn-for=URLSearchParams><code>URLSearchParams(<var>init</var>)</code></dfn>
constructor, when invoked, must return a
<code><a title='URLSearchParams new'>new <a interface>URLSearchParams</a></code> object</a>
using <var>init</var> if given.

<p>The
<dfn method dfn-for=URLSearchParams><code>append(<var>name</var>, <var>value</var>)</code></dfn>
method, when invoked, must run these steps:

<ol>
 <li><p>Append a new name-value pair whose name is <var>name</var> and
 value is <var>value</var>, to <a title='URLSearchParams list'>list</a>.

 <li><p>Run the <a title='URLSearchParams update'>update steps</a>.
</ol>

<p>The
<dfn method dfn-for=URLSearchParams><code>delete(<var>name</var>)</code></dfn>
method, when invoked, must run these steps:

<ol>
 <li><p>Remove all name-value pairs whose name is <var>name</var> from
 <a title='URLSearchParams list'>list</a>.

 <li><p>Run the <a title='URLSearchParams update'>update steps</a>.
</ol>

<p>The
<dfn method dfn-for=URLSearchParams><code>get(<var>name</var>)</code></dfn>
method, when invoked, must return the value of the first name-value pair whose name is
<var>name</var> in <a title='URLSearchParams list'>list</a>, and null if
there is no such pair.

<p>The
<dfn method dfn-for=URLSearchParams><code>getAll(<var>name</var>)</code></dfn>
method, when invoked, must return the values of all name-value pairs whose name is
<var>name</var>, in <a title='URLSearchParams list'>list</a>,
in list order, and the empty sequence otherwise.

<p>The
<dfn method dfn-for=URLSearchParams><code>set(<var>name</var>, <var>value</var>)</code></dfn>
method, when invoked, must run these steps:

<ol>
 <li><p>If there are any name-value pairs whose name is <var>name</var>, in
 <a title='URLSearchParams list'>list</a>, set the value of the first such
 name-value pair to <var>value</var> and remove the others.

 <li><p>Otherwise, append a new name-value pair whose name is <var>name</var> and
 value is <var>value</var>, to <a title='URLSearchParams list'>list</a>.

 <li><p>Run the <a title='URLSearchParams update'>update steps</a>.
</ol>

<p>The
<dfn method dfn-for=URLSearchParams><code>has(<var>name</var>)</code></dfn>
method, when invoked, must return true if there is a name-value pair whose name is
<var>name</var> in <a title='URLSearchParams list'>list</a>, and false
otherwise.

<p>The <a>value pairs to iterate over</a> are the
<a title='URLSearchParams list'>list</a> name-value pairs with the key being
the name and the value the value.

<p>The <dfn dfn dfn-for=URLSearchParams>stringifier</dfn> must return the
<a title='urlencoded serializer'>serialization</a> of the
<code><a interface>URLSearchParams</a></code> object's
<a title='URLSearchParams list'>list</a>.


<h3 id=url-apis-elsewhere>URL APIs elsewhere</h3>

<p>A standard that exposes <a title='URL'>URLs</a>, should expose the
<a>URL</a> as a string (by <a title='URL serializer'>serializing</a> an
internal <a>URL</a>). A standard should not expose a <a>URL</a> using a
<code><a interface>URL</a></code> object. <code><a interface>URL</a></code>
objects are meant for <a>URL</a> manipulation. In IDL the USVString type
should be used.

<p class=note>The higher-level notion here is that values are to be exposed as immutable
data structures.

<p>If a standard decides to use a variant of the name "URL" for a feature it defines, it
should name such a feature "url" (i.e. lowercase and with an "l" at the end). Names such
as "URL", "URI", and "IRI" should not be used. However, if the name is a compound, "URL"
(i.e. uppercase) is preferred, e.g. "newURL" and "oldURL".

<p class=note>The {{EventSource}} and
{{HashChangeEvent}} interfaces in HTML are examples of
proper naming. [[!HTML]]


<h2 id="application/x-www-form-urlencoded"><code title=application-x-www-form-urlencoded-0><a>application/x-www-form-urlencoded</a></code></h2>

<p>The <dfn id=application-x-www-form-urlencoded-0><code>application/x-www-form-urlencoded</code></dfn> format is a simple way to
encode name-value pairs in a byte sequence where all bytes are in the 0x00 to 0x7F range.

<p class="note no-backref">While this description makes
<code title=application-x-www-form-urlencoded-0><a>application/x-www-form-urlencoded</a></code> sound dated — and really, it is — the
format is in widespread use due to its prevalence of HTML forms.
[[!HTML]]

<h3 id=urlencoded-parsing><code title=application-x-www-form-urlencoded-0>application/x-www-form-urlencoded</code> parsing</h3>

<p class="note no-backref">The features provided by the
<code title=application-x-www-form-urlencoded-0><a title='urlencoded parser'>application/x-www-form-urlencoded</a></code> parser
are mainly relevant for server-oriented implementations. A browser-based implementation
only needs what the
<code title=application-x-www-form-urlencoded-0><a title='urlencoded string parser'>application/x-www-form-urlencoded</a></code> string parser
requires.

<p>The
<dfn id=concept-urlencoded-parser title='urlencoded parser'><code title=application-x-www-form-urlencoded-0><a>application/x-www-form-urlencoded</a></code> parser</dfn>
takes a byte sequence <var>input</var>, optionally with an
<a>encoding</a> <var>encoding override</var>,
optionally with a <i title>use _charset_ flag</i>, and optionally with an
<i title>isindex flag</i>, and then runs these steps:

<ol>
 <li><p>If <var>encoding override</var> is not given, set it to
 <a>utf-8</a>.

 <li>
  <p>If <var>encoding override</var> is not
  <a>utf-8</a> and <var>input</var> contains bytes
  whose value is greater than 0x7F, return failure.

  <p class="note no-backref">This can only happen if <var>input</var> was not
  generated through the <a title='urlencoded serializer'>serializer</a> or
  <code><a interface>URLSearchParams</a></code>.

 <li><p>Let <var>sequences</var> be the result of splitting
 <var>input</var> on `<code>&</code>`.
 <!-- XXX define splitting? DOM does not do it -->

 <li><p>If the <i title>isindex flag</i> is set and the first byte sequence in
 <var>sequences</var> does not contain a `<code>=</code>`, prepend
 `<code>=</code>` to the first byte sequence in <var>sequences</var>.

 <li><p>Let <var>pairs</var> be an empty list of name-value pairs where both name
 and value hold a byte sequence.

 <li>
  <p>For each byte sequence <var>bytes</var> in <var>sequences</var>,
  run these substeps:

  <ol>
   <li><p>If <var>bytes</var> is the empty byte sequence, run these substeps for the
   next byte sequence.

   <li><p>If <var>bytes</var> contains a `<code>=</code>`, then let
   <var>name</var> be the bytes from the start of <var>bytes</var> up to but
   excluding its first `<code>=</code>`, and let <var>value</var> be the
   bytes, if any, after the first `<code>=</code>` up to the end of
   <var>bytes</var>. If `<code>=</code>` is the first byte, then
   <var>name</var> will be the empty byte sequence. If it is the last, then
   <var>value</var> will be the empty byte sequence.

   <li><p>Otherwise, let <var>name</var> have the value of <var>bytes</var>
   and let <var>value</var> be the empty byte sequence.

   <li><p>Replace any `<code>+</code>` in <var>name</var> and
   <var>value</var> with 0x20.

   <li>
    <p>If <i title>use _charset_ flag</i> is set, <var>name</var> is
    `<code>_charset_</code>`, run these substeps:

    <ol>
     <li><p>Let <var>result</var> be the result of
     <a title=concept-encoding-get>getting an encoding</a>
     for <var>value</var>,
     <a title="utf-8 decode without BOM">decoded</a>.

     <li><p>If <var>result</var> is not failure, unset <i title>use _charset_ flag</i> and
     set <var>encoding override</var> to <var>result</var>.
    </ol>

   <li><p>Add a pair consisting of <var>name</var> and
   <var>value</var> to <var>pairs</var>.
  </ol>

 <li><p>Let <var>output</var> be an empty list of name-value pairs where both name
 and value hold a string.

 <li><p>For each name-value pair in <var>pairs</var>, append a name-value pair to
 <var>output</var> where the new name and value appended to <var>output</var>
 are the result of running <var>encoding override</var>'s
 <a>decoder</a> on the
 <a title="percent decode">percent decoding</a> of the name and value from
 <var>pairs</var>, respectively.

 <li><p>Return <var>output</var>.
</ol>

<h3 id=urlencoded-serializing><code title=application-x-www-form-urlencoded-0>application/x-www-form-urlencoded</code> serializing</h3>

<p>The
<dfn id=concept-urlencoded-byte-serializer title='urlencoded byte serializer'><code title=application-x-www-form-urlencoded-0><a>application/x-www-form-urlencoded</a></code> byte serializer</dfn>
takes a byte sequence <var>input</var> and then runs these steps:

<ol>
 <li><p>Let <var>output</var> be the empty string.
 <li>
  <p>For each byte in <var>input</var>, depending on
  <var>byte</var>:

  <dl>
   <dt>0x20
   <dd><p>Append U+002B to <var>output</var>.

   <dt>0x2A
   <dt>0x2D
   <dt>0x2E
   <dt>0x30 to 0x39
   <dt>0x41 to 0x5A
   <dt>0x5F
   <dt>0x61 to 0x7A
   <dd><p>Append a code point whose value is <var>byte</var> to
   <var>output</var>.

   <dt>Otherwise
   <dd><p>Append <var>byte</var>,
   <a title="percent encode">percent encoded</a>, to
   <var>output</var>.
  </dl>
 <li><p>Return <var>output</var>.
</ol>
<!-- The inverse of the above byte set is all bytes
     less than 0x20,
     0x21 to 0x29,
     0x2B,
     0x2C,
     0x2F,
     0x3A to 0x40,
     0x5B to 0x5E,
     0x60,
     bytes greater than 0x7A -->

<p>The
<dfn id=concept-urlencoded-serializer title='urlencoded serializer'><code title=application-x-www-form-urlencoded-0><a>application/x-www-form-urlencoded</a></code> serializer</dfn>
takes a list of name-value pairs <var>pairs</var>, optionally with an
<a>encoding</a>
<var>encoding override</var>, and then runs these steps:

<ol>
 <li><p>If <var>encoding override</var> is not given, set it to
 <a>utf-8</a>.

 <li><p>Let <var>output</var> be the empty string.

 <li>
  <p>For each <var>pair</var> in <var>pairs</var>, run
  these substeps:

  <ol>
   <li><p>Let <var>outputPair</var> be a copy of <var>pair</var>.

   <li><p>Replace <var>outputPair</var>'s name and value with the result of running
   <a>encode</a> on them using
   <var>encoding override</var>, respectively.

   <li><p>Replace <var>outputPair</var>'s name and value with their
   <a title='urlencoded byte serializer'>serialization</a>.

   <li><p>If <var>pair</var> is not the first pair in <var>pairs</var>, append
   "<code>&</code>" to <var>output</var>.

   <li><p>Append <var>outputPair</var>'s name, followed by "<code>=</code>",
   followed by <var>outputPair</var>'s value to <var>output</var>.
  </ol>

 <li>Return <var>output</var>.
</ol>

<h3 id=urlencoded-hooks>Hooks</h3>

<p>The
<dfn id=concept-urlencoded-string-parser title='urlencoded string parser'><code title=application-x-www-form-urlencoded-0><a>application/x-www-form-urlencoded</a></code> string parser</dfn>
takes a string <var>input</var>,
<a title="utf-8 encode">utf-8 encodes</a> it, and then
returns the result of
<code title=application-x-www-form-urlencoded-0><a title='urlencoded parser'>application/x-www-form-urlencoded</a></code> parsing
it.


<h2 id=terminology>Terminology</h2>

<p>Some terms used in this specification are defined in the
DOM, Encoding, IDNA, and Web IDL Standards.
[[!DOM]]
[[!ENCODING]]
[[!IDNA]]
[[!WEBIDL]]

<p>The <dfn>ASCII digits</dfn> are code points in the range U+0030 to U+0039.
<!-- XXX ref Encoding? -->

<p>The <dfn>ASCII hex digits</dfn> are <a>ASCII digits</a> or are
code points in the range U+0041 to U+0046 or in the range U+0061 to U+0066.

<p>The <dfn>ASCII alpha</dfn> are code points in the range U+0041 to U+005A
or in the range U+0061 to U+007A.

<p>The <dfn>ASCII alphanumeric</dfn> are <a>ASCII digits</a> or
<a>ASCII alpha</a>.

<p>A <dfn>percent-encoded byte</dfn> is "<code>%</code>", followed by
two <a>ASCII hex digits</a>. Sequences of
<a title="percent-encoded byte">percent-encoded bytes</a>, after
conversion to bytes, should not cause a
<a>utf-8 decoder</a> to run into any
<a title=error>errors</a>.

<!-- the escape sets are minimal as escaping can lead to problems; we might
     be able to escape more here but only if implementors are willing and
     there's an upside

     note that query and application/x-www-form-urlencoded use their own
     local sets -->
<p>The <dfn>simple encode set</dfn> are all code points less than
U+0020 (i.e. excluding U+0020) and all code points greater than U+007E.

<p>The <dfn>default encode set</dfn> is the
<a>simple encode set</a> and code points U+0020,
'<code>"</code>', <!-- 0x22 -->
"<code>#</code>", <!-- 0x23 -->
"<code>&lt;</code>", <!-- 0x3C -->
"<code>&gt;</code>", <!-- 0x3E -->
"<code>?</code>", <!-- 0x3F -->
and
"<code>`</code>". <!-- 0x60 -->

<p>The <dfn>password encode set</dfn> is the
<a>default encode set</a> and code points
"<code>/</code>", <!-- 0x2F -->
"<code>@</code>", <!-- 0x40 -->
and
"<code>\</code>". <!-- 0x5C -->

<p>The <dfn>username encode set</dfn> is the
<a>password encode set</a> and code point
"<code>:</code>". <!-- 0x3A -->

<p>The <dfn>query encode set</dfn> is defined to be code points that are less
than U+0021, greater than U+007E, or one of U+0022, U+0023, U+003C, U+003E,
and U+0060.

<!-- Punycode:
     http://tools.ietf.org/html/rfc3492
     http://mothereff.in/punycode -->

<p>A <dfn id=concept-host title='host'>host</dfn> is a network address in the
form of a <a>domain</a>, an <a title='IPv4'>IPv4 address</a>, or an
<a title='IPv6'>IPv6 address</a>.

<p>A <dfn id=concept-domain title='domain'>domain</dfn> identifies a realm within a network.

<p>An <dfn id=concept-ipv4 title='IPv4'>IPv4 address</dfn> is a 32-bit
identifier and for the purposes of this specification represented as an ordered
list of four <dfn id=concept-ipv4-piece title='IPv4 piece'>8-bit pieces</dfn>.
[[RFC791]]

<p>An <dfn id=concept-ipv6 title='IPv6'>IPv6 address</dfn> is a 128-bit
identifier and for the purposes of this specification is either represented as an ordered
list of eight <dfn id=concept-ipv6-piece title='IPv6 piece'>16-bit
pieces</dfn>, or as a list of seven <a title='IPv6 piece'>16-bit pieces</a>
followed by a single
<dfn id=concept-ipv6-ls32 title='IPV6 LS32'>32-bit piece</dfn>. [[RFC4291]]


<h2 id=acknowledgments class=no-num>Acknowledgments</h2>

<p>There have been a lot of people that have helped make
<a title='URL' class=no-backref>URLs</a> more interoperable over the years and
thereby furthered the goals of this standard. Likewise many people have helped making this
standard what it is today.

<p>With that, many thanks to
Adam Barth,
Albert Wiersch,
Alexandre Morgaut,
Arkadiusz Michalski,
Behnam Esfahbod,
Bobby Holley,
Boris Zbarsky,
Brandon Ross,
Dan Appelquist,
Daniel Bratell,
David Håsäther,
David Sheets,
David Singer,
Erik Arvidsson,
Gavin Carothers,
Geoff Richards,
Glenn Maynard,
Henri Sivonen,
Ian Hickson,
James Graham,
James Manger,
James Ross,
Joshua Bell,
Kevin Grandon,
Larry Masinter,
Mark Davis,
Marcos Cáceres,
Martin Dürst,
Mathias Bynens,
Michael Peick,
Michael™ Smith,
Michel Suignard,
Peter Occil,
Rodney Rehm,
Roy Fielding,
Santiago M. Mola,
Simon Pieters,
Simon Sapin,
Tab Atkins,
Tantek Çelik,
Tim Berners-Lee,
Vyacheslav Matva, and
成瀬ゆい (Yui Naruse)
for being awesome!

<p>This standard is written by
<a lang=nl href=//annevankesteren.nl/>Anne van Kesteren</a>
(<a href=//www.mozilla.org/>Mozilla</a>,
<a href=mailto:annevk@annevk.nl>annevk@annevk.nl</a>)
and
<a lang=en-US href=http://intertwingly.net/>Sam Ruby</a>
(<a href=//www.ibm.com/>IBM</a>,
<a href=mailto:rubys@intertwingly.net>rubys@intertwingly.net</a>).

<p>Per <a rel="license" href="//creativecommons.org/publicdomain/zero/1.0/">CC0</a>, to
the extent possible under law, the editors have waived all copyright and related or
neighboring rights to this work.

<script>
document.addEventListener("DOMContentLoaded", function(event) {
  // no backrefs for index
  document.querySelector('.indexlist').classList.add('no-backref');

  // as bikeshed relocates script elements, add the script element for dfn.js
  // after document loads
  var script = document.createElement('script');
  script.setAttribute('id', 'head');
  script.setAttribute('src', 'https://resources.whatwg.org/dfn.js');
  document.body.appendChild(script);
});
</script>

<pre class="biblio">
{
    "IDNA": {
        "authors": [
            "Mark Davis",
            "Michel Suignard"
        ],
        "href": "http://www.unicode.org/reports/tr46/",
        "title": "Unicode IDNA Compatibility Processing",
        "publisher": "Unicode Consortium"
    },
    "DOM": {
        "authors": [
            "Anne van Kesteren",
            "Aryeh Gregor",
            "Ms2ger"
        ],
        "href": "https://dom.spec.whatwg.org/",
        "title": "DOM",
        "publisher": "WHATWG"
    },
    "ENCODING": {
        "authors": [
            "Anne van Kesteren"
        ],
        "href": "https://encoding.spec.whatwg.org/",
        "title": "Encoding",
        "publisher": "WHATWG"
    },
    "FILEAPI": {
        "authors": [
            "Arun Ranganathan",
            "Jonas Sicking"
        ],
        "href": "http://dev.w3.org/2006/webapi/FileAPI/",
        "title": "File API",
        "publisher": "W3C"
    },
    "RFC791": {
        "authors": [
            "Jon Postel"
        ],
        "href": "http://tools.ietf.org/html/rfc791",
        "title": "Internet Protocol",
        "publisher": "IETF"
    },
    "WEBIDL": {
        "authors": [
            "Cameron McCormack",
            "Jonas Sicking"
        ],
        "href": "http://heycam.github.io/webidl/",
        "title": "Web IDL",
        "publisher": "W3C"
    }
}
</pre>

<pre class="anchors">
urlPrefix: http://dev.w3.org/2006/webapi/FileAPI/; type: dfn
  text: blob
  text: blob url store; url: #BlobURLStore
urlPrefix: https://dom.spec.whatwg.org/; type: dfn
  text: concept-attribute-value
  text: concept-document
  text: context object
  text: dom-node-baseuri
urlPrefix: https://encoding.spec.whatwg.org/; type: dfn
  text: ascii whitespace
  text: concept-encoding-get
  text: decoder
  text: encode
  text: encoding
  text: error
  text: utf-8
  text: utf-8 decode without bom
  text: utf-8 encode
  text: utf-8 decoder
urlPrefix: https://html.spec.whatwg.org/multipage/
  urlPrefix: comms.html; type: interface;
    text: EventSource
    text: HashChangeEvent
  urlPrefix: browsers.html; type: dfn;
    text: origin
    text: unicode serialization of an origin
  urlPrefix: infrastructure.html; type: dfn;
    text: structured clone
urlPrefix: http://heycam.github.io/webidl/#dfn-; type: dfn;
  text: throw
  text: value pairs to iterate over
url: http://www.unicode.org/reports/tr46/#ToASCII; type: dfn; text: toascii
url: http://www.unicode.org/reports/tr46/#ToUnicode; type: dfn; text: tounicode
</pre>
